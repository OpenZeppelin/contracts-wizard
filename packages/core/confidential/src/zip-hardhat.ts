import JSZip from 'jszip';
import type { GenericOptions } from './build-generic';
import type { Contract } from '@openzeppelin/wizard/src/contract';
import { printContract } from './print';
import SOLIDITY_VERSION from '@openzeppelin/wizard/src/solidity-version.json';
import type { Lines } from '@openzeppelin/wizard/src/utils/format-lines';
import { formatLinesWithSpaces, spaceBetween } from '@openzeppelin/wizard/src/utils/format-lines';

// NOTE: fhevm was added (compared to solidity)
const hardhatConfig = (upgradeable: boolean) => `\
import { HardhatUserConfig } from "hardhat/config";
import "@nomicfoundation/hardhat-toolbox";
import "@fhevm/hardhat-plugin";
${upgradeable ? `import "@openzeppelin/hardhat-upgrades";` : ''}

const config: HardhatUserConfig = {
  solidity: {
    version: "${SOLIDITY_VERSION}",
    settings: {
      optimizer: {
        enabled: true,
      },
    },
  },
};

export default config;
`;

const tsConfig = `\
{
  "compilerOptions": {
    "target": "es2020",
    "module": "commonjs",
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "skipLibCheck": true,
    "resolveJsonModule": true
  }
}
`;

const gitIgnore = `\
node_modules
.env
coverage
coverage.json
typechain
typechain-types

# Hardhat files
cache
artifacts
`;

const test = (c: Contract, opts?: GenericOptions) => {
  return formatLinesWithSpaces(2, ...spaceBetween(getImports(), getTestCase(c)));

  function getTestCase(c: Contract) {
    const args = getAddressArgs(c);
    return [
      `describe("${c.name}", function () {`,
      [
        'it("Test contract", async function () {',
        spaceBetween(
          [`const ContractFactory = await ethers.getContractFactory("${c.name}");`],
          getAddressVariables(args),
          // TODO if wrappable, add an ERC20 token address, or add arg placeholder then comment out the deployment line
          [`const instance = await ${getDeploymentCall(c, args)};`, 'await instance.waitForDeployment();'],
          getExpects(),
        ),
        '});',
      ],
      '});',
    ];
  }

  function getImports() {
    return ['import { expect } from "chai";', `import { ${getHardhatPlugins().join(', ')} } from "hardhat";`];
  }

  function getExpects(): Lines[] {
    if (opts !== undefined) {
      switch (opts.kind) {
        case 'ConfidentialFungible':
          break;

        default:
          throw new Error('Unknown contract kind');
      }
    }
    return [];
  }

  function getAddressVariables(args: string[]): Lines[] {
    const vars = [];
    for (let i = 0; i < args.length; i++) {
      vars.push(`const ${args[i]} = (await ethers.getSigners())[${i}].address;`);
    }
    return vars;
  }
};

function getAddressArgs(c: Contract): string[] {
  const args = [];
  for (const constructorArg of c.constructorArgs) {
    if (constructorArg.type === 'address') {
      args.push(constructorArg.name);
    }
  }
  return args;
}

function getDeploymentCall(c: Contract, args: string[]): string {
  // NOTE removed upgradeable
  return `ContractFactory.deploy(${args.join(', ')})`;
}

// NOTE removed script

const lowerFirstCharacter = (str: string) => str.charAt(0).toLowerCase() + str.slice(1);

const ignitionModule = (c: Contract) => {
  const deployArguments = getAddressArgs(c);
  const contractVariableName = lowerFirstCharacter(c.name);

  return `import { buildModule } from "@nomicfoundation/hardhat-ignition/modules";

export default buildModule("${c.name}Module", (m) => {

  ${deployArguments.length > 0 ? '// TODO: Set addresses for the contract arguments below' : ''}
  const ${contractVariableName} = m.contract("${c.name}", [${deployArguments.join(', ')}]);

  return { ${contractVariableName} };
});
`;
};

// NOTE removed upgradeable
const readme = (c: Contract) => `\
# Sample Hardhat Project

This project demonstrates a basic Hardhat use case. It comes with a contract generated by [OpenZeppelin Wizard](https://wizard.openzeppelin.com/), a test for that contract, and a Hardhat Ignition module that deploys that contract.

## Installing dependencies

\`\`\`
npm install
\`\`\`

## Testing the contract

\`\`\`
npm test
\`\`\`

## Deploying the contract

You can target any network from your Hardhat config using:

\`\`\`
npx hardhat ignition deploy ignition/modules/${c.name}.ts --network <network-name>
\`\`\`
`;

function getHardhatPlugins() {
  const plugins = ['ethers'];
  return plugins;
}

export async function zipHardhat(c: Contract, opts?: GenericOptions) {
  const zip = new JSZip();

  // NOTE: removed upgradeable
  const { default: packageJson } = await import('./environments/hardhat/package.json');
  packageJson.license = c.license;

  const { default: packageLock } = await import('./environments/hardhat/package-lock.json');
  packageLock.packages[''].license = c.license;

  zip.file(`contracts/${c.name}.sol`, printContract(c));
  zip.file('test/test.ts', test(c, opts));

  // NOTE removed upgradeable
  zip.file(`ignition/modules/${c.name}.ts`, ignitionModule(c));

  zip.file('.gitignore', gitIgnore);
  // TODO: remove upgradeable flag
  zip.file('hardhat.config.ts', hardhatConfig(false));
  zip.file('package.json', JSON.stringify(packageJson, null, 2));
  zip.file(`package-lock.json`, JSON.stringify(packageLock, null, 2));
  zip.file('README.md', readme(c));
  zip.file('tsconfig.json', tsConfig);

  return zip;
}
