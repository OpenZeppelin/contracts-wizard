import JSZip from "jszip";
import type { GenericOptions } from "./build-generic";
import type { Contract } from "./contract";
import { printContract } from "./print";
import SOLIDITY_VERSION from './solidity-version.json';
import contracts from '../openzeppelin-contracts';
import { formatLinesWithSpaces, Lines, spaceBetween } from "./utils/format-lines";

const githubWorkflowsTestYml = `\
name: test

on: workflow_dispatch

env:
  FOUNDRY_PROFILE: ci

jobs:
  check:
    strategy:
      fail-fast: true

    name: Foundry project
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Run Forge build
        run: |
          forge --version
          forge build --sizes
        id: build

      - name: Run Forge tests
        run: |
          forge test -vvv
        id: test
`;

const dotEnv = `\
PRIVATE_KEY=`

const gitIgnore = `\
# Compiler files
cache/
out/

# Ignores development broadcast logs
!/broadcast
/broadcast/*/31337/
/broadcast/**/dry-run/

# Docs
docs/

# Dotenv file
.env
`;

const foundryToml = `\
[profile.default]
src = "src"
out = "out"
libs = ["lib"]

# See more config options https://github.com/foundry-rs/foundry/tree/master/config
`

const remappings = `\
@openzeppelin/=lib/openzeppelin-contracts/
`

function getHeader(c: Contract) {
  return [
    `// SPDX-License-Identifier: ${c.license}`,
    `pragma solidity ^${SOLIDITY_VERSION};`
  ];
}

const test = (c: Contract, opts?: GenericOptions) => {
  return formatLinesWithSpaces(
    2,
    ...spaceBetween(
      getHeader(c),
      getImports(c),
      getTestCase(c),
    ),
  );

  function getImports(c: Contract) {
    return [
      'import "forge-std/Test.sol";',
      `import "../src/${c.name}.sol";`,
    ];
  }

  function getTestCase(c: Contract) {
    return [
      `contract ${c.name}Test is Test {`,
      spaceBetween(
        [
          `${c.name} public instance;`,
        ],
        [
          'function setUp() public {',
          [
            `instance = new ${c.name}();`,
          ],
          '}',
        ],
        getContractSpecificTestFunction(),
      ),
      '}',
    ];
  }

  function getContractSpecificTestFunction(): Lines[] {
    if (opts !== undefined) {
      switch (opts.kind) {
        case 'ERC20':
        case 'ERC721':
          return [
            'function testName() public {',
            [
              `assertEq(instance.name(), "${opts.name}");`
            ],
            '}',
          ];

        case 'ERC1155':
          return [
            'function testUri() public {',
            [
              `assertEq(instance.uri(0), "${opts.uri}");`
            ],
            '}',
          ];

        case 'Governor':
        case 'Custom':
          return [
            'function testSomething() public {',
            [
              '// Add your test here',
            ],
            '}',
          ]

        default:
          throw new Error('Unknown ERC');
      }
    }
    return [];
  }
};

const script = (c: Contract) => {
  return formatLinesWithSpaces(
    2,
    ...spaceBetween(
      getHeader(c),
      getImports(c),
      getScript(c),
    ),
  );

  function getImports(c: Contract) {
    return [
      'import "forge-std/Script.sol";',
      `import "../src/${c.name}.sol";`,
    ];
  }

  function getScript(c: Contract) {
    return [
      `contract ${c.name}Script is Script {`,
      spaceBetween(
        [
          'function setUp() public {}',
        ],
        [
          'function run() public {',
          [
            'uint256 deployerPrivateKey = vm.envUint("PRIVATE_KEY");',
            'vm.startBroadcast(deployerPrivateKey);',
            `${c.name} instance = new ${c.name}();`,
            'console.log("Deploying contract to %s", address(instance));',
            'vm.stopBroadcast();',
          ],
          '}',
        ],
      ),
      '}',
    ];
  }
};

const makefile = `\
.PHONY: all
all: | .git lib
	forge clean
	forge build

.git:
	git init
	git add .
	git commit -m "Initial commit"

lib:
	forge install foundry-rs/forge-std
	forge install OpenZeppelin/openzeppelin-contracts@v${contracts.version}
`;

const readme = (c: Contract) => `\
# Sample Foundry Project

This project demonstrates a basic Foundry use case. It comes with a contract generated by [OpenZeppelin Wizard](https://wizard.openzeppelin.com/), a test for that contract, and a script that deploys that contract.

## Installing Foundry

See [Foundry installation guide](https://book.getfoundry.sh/getting-started/installation).

## Building the project

\`\`\`
make
\`\`\`

## Testing the contract

\`\`\`
forge test
\`\`\`

## Deploying the contract

You can deploy the contract to any network by providing a private key and RPC URL:

1. Add your deployer account's private key to the \`PRIVATE_KEY\` variable in the \`.env\` file.
2. Run the following command:
\`\`\`
forge script scripts/${c.name}.s.sol --rpc-url <RPC URL> --broadcast
\`\`\`

See [Solidity scripting guide](https://book.getfoundry.sh/tutorials/solidity-scripting) for more information.
`;

export async function zipFoundry(c: Contract, opts?: GenericOptions) {
  const zip = new JSZip();

  zip.file(`src/${c.name}.sol`, printContract(c));
  zip.file(`test/${c.name}.t.sol`, test(c, opts));
  zip.file(`scripts/${c.name}.s.sol`, script(c));
  zip.file('.github/workflows/test.yml', githubWorkflowsTestYml); 
  zip.file('.env', dotEnv);
  zip.file('.gitignore', gitIgnore);
  zip.file('foundry.toml', foundryToml);
  zip.file('remappings.txt', remappings);
  zip.file('Makefile', makefile);
  zip.file('README.md', readme(c));

  return zip;
}