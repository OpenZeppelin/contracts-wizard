import JSZip from "jszip";
import type { GenericOptions } from "../build-generic";
import type { Contract } from "../contract";
import type { ERC1155Options } from "../erc1155";
import { printContract } from "../print";
import { hardhatPackageLock } from "./lockHardhat";
import { hardhatUpgradeablePackageLock } from "./lockHardhatUpgradeable";

import { version as contractsVersion } from "@openzeppelin/contracts/package.json";
import { version as contractsUpgradeableVersion } from "@openzeppelin/contracts-upgradeable/package.json";
import { version as hardhatVersion } from "hardhat/package.json";
import { version as hardhatUpgradesVersion } from "@openzeppelin/hardhat-upgrades/package.json";
import { version as hardhatEthersVersion } from "@nomiclabs/hardhat-ethers/package.json";
import { version as hardhatToolboxVersion } from "@nomicfoundation/hardhat-toolbox/package.json";
import { version as ethersVersion } from "ethers/package.json";

const hardhatConfig = (upgradeable: boolean) => `\
import { HardhatUserConfig } from "hardhat/config";
import "@nomicfoundation/hardhat-toolbox";${upgradeable ? `
import "@openzeppelin/hardhat-upgrades";` : ''}

const config: HardhatUserConfig = {
  solidity: {
    version: "0.8.9",
    settings: {
      optimizer: {
        enabled: true,
      },
    },
  }
};

export default config;
`;

const packageJson = (upgradeable: boolean) => `\
{
  "name": "hardhat-sample",
  "version": "0.0.1",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "npx hardhat test"
  },
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "@nomicfoundation/hardhat-toolbox": "^${hardhatToolboxVersion}",
    ${upgradeable ? `"@openzeppelin/contracts-upgradeable" : "^${contractsUpgradeableVersion}",
    "@openzeppelin/hardhat-upgrades": "^${hardhatUpgradesVersion}",
    "@nomiclabs/hardhat-ethers": "^${hardhatEthersVersion}",
    "ethers": "^${ethersVersion}",`
    :
    `"@openzeppelin/contracts" : "^${contractsVersion}",`
    }
    "hardhat": "^${hardhatVersion}"
  }
}
`

const tsConfig = `\
{
  "compilerOptions": {
    "target": "es2020",
    "module": "commonjs",
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "skipLibCheck": true
  }
}
`

const gitIgnore = `\
node_modules
.env
coverage
coverage.json
typechain
typechain-types

#Hardhat files
cache
artifacts
`

const test = (c: Contract, opts?: GenericOptions) => {

let buf = `\
import { expect } from "chai";
import { ethers${c.upgradeable ? ', upgrades' : ''} } from "hardhat";

describe("${c.name}", function () {
  it("Test contract", async function () {
    const ContractFactory = await ethers.getContractFactory("${c.name}");

    const instance = await ${c.upgradeable ? 'upgrades.deployProxy(ContractFactory);' : 'ContractFactory.deploy();' }
    await instance.deployed();

`;

if (opts !== undefined) {
  switch (opts.kind) {
    case 'ERC20':
    case 'ERC721':
      buf += `    expect(await instance.name()).to.equal("${opts.name}");`
      break;

    case 'ERC1155':
      buf += `    expect(await instance.uri(0)).to.equal("${(opts as ERC1155Options).uri}");`
      break;

    case 'Governor':
      break;

    case 'Custom':
      break;

    default:
      const _: never = opts;
      throw new Error('Unknown ERC');
  }
}

buf += `
  });
});
`
return buf;
}

const script = (c: Contract) => `\
import { ethers${c.upgradeable ? ', upgrades' : ''} } from "hardhat";

async function main() {
  const ContractFactory = await ethers.getContractFactory("${c.name}");

  const instance = await ${c.upgradeable ? 'upgrades.deployProxy(ContractFactory);' : 'ContractFactory.deploy();' }
  await instance.deployed();

  console.log(\`${c.upgradeable ? 'Proxy' : 'Contract'} deployed to \${instance.address}\`);
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
`

const readme = `\
# Sample Hardhat Project

This project demonstrates a basic Hardhat use case. It comes with a contract generated by [OpenZeppelin Wizard](https://wizard.openzeppelin.com/), a test for that contract, and a script that deploys that contract.

## Installing dependencies

\`\`\`shell
npm install
\`\`\`

## Testing the contract

\`\`\`shell
npm test
\`\`\`

## Deploying the contract

You can target any network from your Hardhat config using:

\`\`\`shell
npx hardhat run --network <your-network> scripts/deploy.js
\`\`\`
`

export function zipHardhat(c: Contract, opts?: GenericOptions) {
  const zip = new JSZip();

  zip.file('hardhat.config.ts', hardhatConfig(c.upgradeable));
  zip.file('package.json', packageJson(c.upgradeable));
  zip.file('README.md', readme);
  zip.file('tsconfig.json', tsConfig);
  zip.file('.gitignore', gitIgnore);
  zip.file('test/test.ts', test(c, opts));
  zip.file('scripts/deploy.ts', script(c));

  zip.file(`contracts/${c.name}.sol`, printContract(c));

  zip.file(`package-lock.json`, c.upgradeable ? hardhatUpgradeablePackageLock : hardhatPackageLock);

  return zip;
}